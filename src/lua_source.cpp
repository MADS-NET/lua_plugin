/*
  ____                                   _             _       
 / ___|  ___  _   _ _ __ ___ ___   _ __ | |_   _  __ _(_)_ __  
 \___ \ / _ \| | | | '__/ __/ _ \ | '_ \| | | | |/ _` | | '_ \ 
  ___) | (_) | |_| | | | (_|  __/ | |_) | | |_| | (_| | | | | |
 |____/ \___/ \__,_|_|  \___\___| | .__/|_|\__,_|\__, |_|_| |_|
                                  |_|            |___/         
# A Template for LuaSourcePlugin, a Source Plugin
# Generated by the command: plugin -t source -d . lua_source
# Hostname: Fram-IV.local
# Current working directory: /Users/p4010/Develop/MADS_plugins/lua_plugin
# Creation date: 2024-08-27T13:15:43.057+0200
# NOTICE: MADS Version 1.2.0
*/
// Mandatory included headers
#include <source.hpp>
#include <nlohmann/json.hpp>
#include <pugg/Kernel.h>
// other includes as needed here
// clang-format off
#include <fstream>
#include <filesystem>
#include <lua.hpp>
#include <lualib.h>
#include <lauxlib.h>
#include <sol/sol.hpp>
#include "utils.hpp"
// clang-format on

// Define the name of the plugin
#ifndef PLUGIN_NAME
#define PLUGIN_NAME "lua_source"
#endif

// Load the namespaces
using namespace std;
using json = nlohmann::json;


// Plugin class. This shall be the only part that needs to be modified,
// implementing the actual functionality
class LuaSourcePlugin : public Source<json>, public MADS::LuaPlugin {

public:
  ~LuaSourcePlugin() {
    _lua.collect_garbage();
    _lua.end();
  }

  // Typically, no need to change this
  string kind() override { return PLUGIN_NAME; }

  return_type get_output(json &out,
                         std::vector<unsigned char> *blob = nullptr) override {
    out.clear();

    if (!_agent_id.empty()) out["agent_id"] = _agent_id;

    try {
      out["payload"] = json::parse(_get_output(_self));
    } catch (exception &e) {
      cerr << "Error: " << e.what() << endl;
      return return_type::error;
    }

    return return_type::success;
  }

  void set_params(void const *params) override {
    Source::set_params(params);
    _params["script_file"] = "source.lua";
    _params["search_paths"] = json::array();
    _params.merge_patch(*(json *)params);

    prepare_paths(_params);
    prepare_lua("get_output");
    _get_output = _self["get_output"];
  }

  map<string, string> info() override {
    return {{"script_file", _script_file}};
  };

private:
  function<string(sol::table)> _get_output;
};


/*
  ____  _             _             _      _
 |  _ \| |_   _  __ _(_)_ __     __| |_ __(_)_   _____ _ __
 | |_) | | | | |/ _` | | '_ \   / _` | '__| \ \ / / _ \ '__|
 |  __/| | |_| | (_| | | | | | | (_| | |  | |\ V /  __/ |
 |_|   |_|\__,_|\__, |_|_| |_|  \__,_|_|  |_| \_/ \___|_|
                |___/
Enable the class as plugin
*/
INSTALL_SOURCE_DRIVER(LuaSourcePlugin, json)


/*
                  _
  _ __ ___   __ _(_)_ __
 | '_ ` _ \ / _` | | '_ \
 | | | | | | (_| | | | | |
 |_| |_| |_|\__,_|_|_| |_|

For testing purposes, when directly executing the plugin
*/
int main(int argc, char const *argv[]) {
  LuaSourcePlugin plugin;
  json output, params;

  params["script_file"] = "source.lua";

  if (argc > 1) {
    params["script_file"] = argv[1];
  }
  plugin.set_params(&params);

  // Process data
  plugin.get_output(output);

  // Produce output
  cout << "Output: " << output << endl;

  return 0;
}
